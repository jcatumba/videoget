#!/usr/bin/env python
# -*- coding: utf-8 -*-

__author__ = (
    'Jorge Catumba Ruiz',
    )

__license__ = 'General Public License GPLv3'
__version__ = '0.1'

UDPATE_URL = ''

# example helloworld.py

import pygtk
pygtk.require('2.0')
import gtk, gobject

class MainWindow:

    # This is a callback function. The data arguments are ignored
    # in this example. More on callbacks below.
    def add(self, widget, data=None):
        print "A file must be added"
        
    def remove(self, widget, data=None):
        print "A URL must be deleted"
        
    def callback(self, widget, data=None):
        print "Hello again - %s was pressed" % data
        
    def delete_event(self, widget, event, data=None):
        # If you return FALSE in the "delete_event" signal handler,
        # GTK will emit the "destroy" signal. Returning TRUE means
        # you don't want the window to be destroyed.
        # This is useful for popping up 'are you sure you want to quit?'
        # type dialogs.
        print "Kill event occurred"
        gtk.main_quit()
        # Change FALSE to TRUE and the main window will not be destroyed
        # with a "delete_event".
        return False
    
    def create_button(label, event, callback, data=None):
        button = gtk.Button(label)
        button.connect(event, callback, data)
        button.show()
        return button
        
    def make_menu_item(name, callback, data=None):
        item = gtk.MenuItem(name)
        item.connect("activate", callback, data)
        item.show()
        return item
        
    # Another callback
    def cb_pos_menu_select(self, item, pos):
        # Set the value position on both scale widgets
        self.hscale.set_value_pos(pos)
        self.vscale.set_value_pos(pos)
    
    def __init__(self):
        #-- Create a new window
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_title("VideoGet 0.1")
        # When the window is given the "delete event" signal (this is given
        # by the window manager, usually "close" option, or on the titlebar),
        # we ask it to call the delete_event () function as define above.
        # The data passed to the callback function is NULL and is ignored
        # in the callback function.
        self.window.connect("delete_event", self.delete_event)
        # Here we connect the "destroy" event to a signal handler.
        # This event occurs when we call gtk_window_destroy() on the window
        # or if we return FALSE in the "delete_event" callback.
        #self.window.connect("destroy", self.destroy)
        # Set the border width of the window.
        self.window.set_border_width(15)
        
        #-- Create a table environment.
        self.table = gtk.Table(rows=5, columns=5, homogeneous=False)
        # Put the table in the main window.
        self.window.add(self.table)
        
        #-- Create the "Videos URL:" label.
        label = gtk.Label("Videos URL:")
        self.table.attach(label, 0, 1, 0, 1)
        label.show()
        
        #-- Create the "Progress:" label.
        #label = gtk.Label("Progress:")
        #self.table.attach(label, 0, 5, 3, 4)
        #label.show()
        
        #-- Create the progress bar
        progress = gtk.ProgressBar()
        progress.set_fraction(0.7)
        #progress.set_orientation("PROGRESS_LEFT_TO_RIGHT")
        progress.pulse()
        progress.set_pulse_step(0.1)
        self.table.attach(progress, 0, 5, 3, 4)
        progress.show()
        
        #-- Create the "Add URL" button.
        #self.button = self.create_button("Add URL", "clicked", self.add, None)
        self.button = gtk.Button("Add URL")
        # When the button receives the "clicked" signal, it will call the
        # function hello() passing it None as its argument. The hello()
        # function is defined bellow
        self.button.connect("clicked", self.add, None)
        # Add the button to the table
        self.table.attach(self.button, 4, 5, 1, 2)
        # show the "Add URL" button
        self.button.show()
        
        #-- Create the "Remove" button.
        self.button = gtk.Button("Remove")
        self.button.connect("clicked", self.remove, None)
        self.table.attach(self.button, 4, 5, 2, 3)
        self.button.show()
        
        #-- Create the "Close" button.
        self.button = gtk.Button("Close")
        # This will cause the window to be destroyed by calling
        # gtk_widget_destroy(window) when "clicked". Again, the destroy
        # signal could come from here, or the window manager.
        self.button.connect("clicked", self.delete_event, self.window)
        self.table.attach(self.button, 4, 5, 4, 5)
        self.button.show()
        
        #-- Create a box
        #box2 = gtk.HBox(False, 10)
        #box2.set_border_width(10)
        #label = gtk.Label("Options:")
        #box2.pack_start(label, False, False, 0)
        #label.show()
        
        #-- Create the option menu for audio encodings
        #options = gtk.OptionMenu()
        # Define the menu oject
        #menu = gtk.Menu
        # Create the items for the menu
        #item = make_menu_item("Top", self.cb_pos_menu_select, gtk.POS_TOP)
        #menu.append(item)
        #item = make_menu_item("Bottom", self.cb_pos_menu_select, gtk.POS_BOTTOM)
        #menu.append(item)
        #opt.set_menu(menu)
        #box2.pack_start(opt, True, True, 0)
        #box2.show()
        #self.table.attach(box2, 2, 3, 0, 5)
        
        # Display the table
        self.table.show()
        # and the window.
        self.window.show()
        
    def main(self):
        # All PyGTK applications must have a gtk.main(). Control ends here
        # and waits for an event to occur (like a key press or mouse event).
        gtk.main()
        return 0
        
# If the program is run directly or passed as an argument to the python
# interpreter then create a HelloWorld instance and show it
if __name__=="__main__":
    principal = MainWindow()
    principal.main()
