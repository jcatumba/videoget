#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Videoget is a GTK tool for youtube-dl. Its released under the GPLv3
# For comments send a email to jorgerev90 at gmail.com
__author__ = (
    'Jorge Catumba Ruiz',
    )

__license__ = 'General Public License GPLv3'
__version__ = '0.1'

UDPATE_URL = ''

# example helloworld.py

import pygtk
pygtk.require('2.0')
import gtk, gobject

class MainWindow:

    TARGETS = [
        ('MY_TREE_MODEL_ROW', gtk.TARGET_SAME_WIDGET, 0),
        ('text/plain', 0, 1),
        ('TEXT', 0, 2),
        ('STRING', 0, 3),
        ]

    def add(self, widget, data=None):
	""" This function allow to add url from a file """
        print "A file must be added"
        
    def callback(self, widget, data=None):
        print "Hello again - %s was pressed" % data
        
    def delete_event(self, widget, event, data=None):
        # If you return FALSE in the "delete_event" signal handler,
        # GTK will emit the "destroy" signal. Returning TRUE means
        # you don't want the window to be destroyed.
        # This is useful for popping up 'are you sure you want to quit?'
        # type dialogs.
        print "Kill event occurred"
        gtk.main_quit()
        # Change FALSE to TRUE and the main window will not be destroyed
        # with a "delete_event".
        return False

    def clear_selected(self, button):
        selection = self.treeview.get_selection()
        model, iter = selection.get_selected()
        if iter:
            model.remove(iter)
        return
    
    def make_menu_item(name, callback, data=None):
        item = gtk.MenuItem(name)
        item.connect("activate", callback, data)
        item.show()
        return item
        
    def cb_pos_menu_select(self, item, pos):
        # Set the value position on both scale widgets
        self.hscale.set_value_pos(pos)
        self.vscale.set_value_pos(pos)
    
    def __init__(self):
        #-- Create a new window
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_title("VideoGet 0.1")
        self.window.set_size_request(600, 600)
        # When the window is given the "delete event" signal (this is given
        # by the window manager, usually "close" option, or on the titlebar),
        # we ask it to call the delete_event () function as define above.
        # The data passed to the callback function is NULL and is ignored
        # in the callback function.
        self.window.connect("delete_event", self.delete_event)
        # Here we connect the "destroy" event to a signal handler.
        # This event occurs when we call gtk_window_destroy() on the window
        # or if we return FALSE in the "delete_event" callback.
        #self.window.connect("destroy", self.destroy)
        # Set the border width of the window.
        self.window.set_border_width(15)
        
        #-- Create a table environment.
        self.table = gtk.Table(rows=9, columns=5, homogeneous=True)
        self.window.add(self.table)
        
        #-- Create the "Videos URL:" label.
        label = gtk.Label("Videos URL:")
        self.table.attach(label, 0, 1, 0, 1)
        label.show()
        
        #-- Create the "Progress:" label.
        #label = gtk.Label("Progress:")
        #self.table.attach(label, 0, 5, 3, 4)
        #label.show()
        
        #-- Create the progress bar
        progress = gtk.ProgressBar()
        progress.set_fraction(0.5)
        progress.pulse()
        progress.set_pulse_step(0.1)
        self.table.attach(progress, 0, 5, 7, 8)
        progress.show()
        
        #-- Create the "Add URL" button.
        self.addbutton = gtk.Button("Add URL")
        self.addbutton.connect("clicked", self.add, None)
        self.table.attach(self.addbutton, 4, 5, 1, 2)
        self.addbutton.show()
        
        #-- Create the "Remove selected" button.
        self.rsbutton = gtk.Button("Remove selected")
        self.rsbutton.connect("clicked", self.clear_selected)
        self.table.attach(self.rsbutton, 4, 5, 2, 3)
        self.rsbutton.show()
        
        #-- Create the "Remove all" button.
        self.rabutton = gtk.Button("Remove all")
        self.table.attach(self.rabutton, 4, 5, 3, 4)
        self.rabutton.show()
        
        #-- Create the "Close" button.
        self.cbutton = gtk.Button("Close")
        self.cbutton.connect("clicked", self.delete_event, self.window)
        self.table.attach(self.cbutton, 4, 5, 8, 9)
        self.cbutton.show()
        
	#-- Create the TreeView
        self.scrolledwindow = gtk.ScrolledWindow()
        self.liststore = gtk.ListStore(str)
        self.treeview = gtk.TreeView(self.liststore)
        self.cell = gtk.CellRendererText()
        self.tvcolumn = gtk.TreeViewColumn('URL', self.cell, text=0)
        self.treeview.append_column(self.tvcolumn)
        self.rabutton.connect_object("clicked", gtk.ListStore.clear, self.liststore)
        self.treeview.set_search_column(0)
        self.tvcolumn.set_sort_column_id(0)
        self.treeview.enable_model_drag_source(gtk.gdk.BUTTON1_MASK,
                                                self.TARGETS,
                                                gtk.gdk.ACTION_DEFAULT |
                                                gtk.gdk.ACTION_MOVE)
        self.treeview.enable_model_drag_dest(self.TARGETS, gtk.gdk.ACTION_DEFAULT)
        self.treeview.connect("drag_data_get", self.drag_data_get_data)
        self.treeview.connect("drag_data_received", self.drag_data_received_data)
        self.scrolledwindow.add(self.treeview)
        self.table.attach(self.scrolledwindow, 0, 4, 1, 7)

        #-- Display the table and the window
        self.table.show()
        self.window.show_all()
        
        
    def drag_data_get_data(self, treeview, context, selection, target_id, etime):
        treeselection = treeview.get_selection()
        model, iter = treeselection.get_selected()
        data = model.get_value(iter, 0)
        selection.set(selection.target, 8, data)
        
    def drag_data_received_data(self, treeview, context, x, y, selection, info, etime):
        model = treeview.get_model()
        data = selection.data
        drop_info = treeview.get_dest_row_at_pos(x,y)
        if drop_info:
            path, position = drop_info
            iter = model.get_iter(path)
            if (position == gtk.TREE_VIEW_DROP_BEFORE
                or position == gtk.TREE_VIEW_DROP_INTO_OR_BEFORE):
                model.insert_before(iter, [data])
            else:
                model.insert_after(iter, [data])
        else:
            model.append([data])
        if context.action == gtk.gdk.ACTION_MOVE:
            context.finish(True, True, etime)
        return

    def main(self):
        # All PyGTK applications must have a gtk.main(). Control ends here
        # and waits for an event to occur (like a key press or mouse event).
        gtk.main()
        return 0
        
# If the program is run directly or passed as an argument to the python
# interpreter then create a HelloWorld instance and show it
if __name__=="__main__":
    principal = MainWindow()
    principal.main()
